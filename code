import random


class StudentNode:  # Узел двусвязного списка для хранения данных об ученике
    def __init__(self, name):
        self.name = name  # Фамилия ученика (строка)
        self.rating = 0  # Текущий рейтинг ученика (целое число)
        self.prev = None  # Ссылка на предыдущий узел в списке
        self.next = None  # Ссылка на следующий узел в списке


class StudentCircle:  # Класс для реализации двусвязного циклического списка учеников
    def __init__(self):
        self.head = None  # Фиксированный начальный элемент списка
        self.current_marker = None  # Текущий маркер начала круга
        self.size = 0  # Количество учеников в круге

    def add_student(self, name):  # Добавляет нового ученика в круг
        new_node = StudentNode(name)  # Создаем новый узел

        if self.head is None:  # Если список пуст
            new_node.next = new_node  # Замыкаем ссылки на себя
            new_node.prev = new_node
            self.head = new_node
            self.current_marker = new_node  # Инициализируем маркер
        else:  # Если в списке уже есть элементы
            last = self.head.prev  # Находим последний элемент
            last.next = new_node  # Добавляем новый элемент после последнего
            new_node.prev = last
            new_node.next = self.head
            self.head.prev = new_node

        self.size += 1  # Увеличиваем счетчик учеников

    def find_student(self, name):  # Ищет ученика по имени (без учета регистра)
        if self.head is None:  # Если список пуст
            return None

        current = self.head  # Начинаем поиск с головы списка
        while True:
            if current.name.lower() == name.lower():  # Сравниваем без учета регистра
                return current
            current = current.next  # Переходим к следующему
            if current == self.head:  # Если прошли весь круг
                break
        return None  # Если не нашли

    def get_student_steps(self, start_node, steps):  # Находит ученика через N шагов
        if self.size == 0:  # Если список пуст
            return None

        current = start_node  # Начинаем с указанного узла
        if steps < 0:  # Обработка отрицательных шагов
            steps = self.size - (abs(steps) % self.size)

        steps %= self.size  # Нормализуем шаги (убираем полные круги)

        for _ in range(steps):  # Делаем указанное количество шагов
            current = current.next
        return current

    def print_circle(self):  # Выводит текущее состояние круга
        if self.head is None:  # Если список пуст
            print("Круг пуст")
            return

        current = self.head  # Начинаем с головы списка
        print("Текущий круг учеников:")
        while True:
            print(f"{current.name} (рейтинг: {current.rating})", end="")
            if current == self.current_marker:  # Помечаем начало круга
                print(" <- Начало круга")
            else:
                print()
            current = current.next  # Переходим к следующему
            if current == self.head:  # Если прошли весь круг
                break

    def get_students_list(self):  # Возвращает список учеников для сортировки
        if self.head is None:  # Если список пуст
            return []

        students = []  # Создаем пустой список для результатов
        current = self.head  # Начинаем с головы списка
        index = 0  # Для сохранения исходного порядка
        while True:
            # Добавляем кортеж (имя, рейтинг, исходный индекс)
            students.append((current.name, current.rating, index))
            index += 1
            current = current.next
            if current == self.head:  # Если прошли весь круг
                break
        return students


# Функция для сортировки списка учеников (вне класса)
def sort_students_by_rating(students):
    # Сортируем по убыванию рейтинга (-x[1]), затем по исходному индексу (x[2])
    students.sort(key=lambda x: (-x[1], x[2]))

    # Возвращаем только имя и рейтинг (без индекса)
    return [(name, rating) for name, rating, _ in students]


def read_students_from_file():  # Читает список учеников из файла
    while True:  # Бесконечный цикл для повторных попыток
        filename = input("Введите имя файла со списком учеников: ")
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                lines = [line.strip() for line in file if line.strip()]
                if not lines:  # Если файл пустой
                    print("Файл пуст. Пожалуйста, выберите другой файл.")
                    continue  # Повторяем запрос файла
                return lines  # Возвращаем список учеников
        except FileNotFoundError:
            print(f"Ошибка: файл '{filename}' не найден!")
        except Exception as ex:
            print(f"Ошибка при чтении файла: {ex}")
        # Цикл продолжится для повторного запроса файла


def select_starting_student(circle):  # Выбор ученика для начала игры
    circle.print_circle()  # Показываем текущий круг
    while True:
        name = input("\nВведите фамилию ученика для начала: ").strip()
        if not name:  # Если ввод пустой - берем первого ученика
            return circle.head

        student = circle.find_student(name)
        if student:  # Если ученик найден
            circle.current_marker = student  # Обновляем маркер начала круга
            return student
        print("Ученик не найден. Попробуйте еще раз.")


def get_number_input(round_num):  # Запрос числа для раунда
    while True:
        try:
            num_input = input(f"Введите число для раунда {round_num}: ").strip()
            if not num_input:  # Если ввод пустой - генерируем случайное
                return random.randint(-10, 10)
            num = int(num_input)  # Преобразуем в число
            if num < -10 or num > 10:  # Проверка диапазона
                print("Число должно быть от -10 до 10")
                continue
            return num
        except ValueError:
            print("Ошибка: введите целое число!")


def main(): # Основная функция игры с обработкой ошибок чтения файла
    print("=== Игра 'Добрые дела' ===")
    print("Ученики встают в круг и делают добрые дела!")

    # Чтение файла с повторными попытками при ошибках
    student_names = read_students_from_file()

    # Остальной код main() остается без изменений
    circle = StudentCircle()
    for name in student_names:
        circle.add_student(name)

    # Выбор начального ученика
    current_student = select_starting_student(circle)

    # Запрос количества раундов
    while True:
        try:
            rounds = int(input("\nВведите количество раундов: "))
            if rounds <= 0:
                print("Число раундов должно быть > 0")
                continue
            break
        except ValueError:
            print("Ошибка: введите целое число!")

    # Основной игровой цикл
    for round_num in range(1, rounds + 1):
        number = get_number_input(round_num)
        direction = "по часовой" if number > 0 else "против часовой" \
            if number < 0 else "не двигаемся"

        print(f"\nРаунд {round_num}:")
        print(f"Число: {number} ({direction})")
        print(f"Начинаем с: {current_student.name}")

        # Выбор ученика для доброго дела
        selected = circle.get_student_steps(current_student, number)
        selected.rating += 1  # Увеличиваем рейтинг

        # Обновление маркера начала круга
        circle.current_marker = current_student

        print(f"Ученик {selected.name} делает доброе дело!")
        print(f"Новый рейтинг: {selected.rating}")

        # Определение следующего ученика
        if number > 0:  # По часовой стрелке
            current_student = selected.next
        elif number < 0:  # Против часовой стрелки
            current_student = selected.prev
        else:  # Если число 0
            current_student = selected

        # Вывод обновленного круга
        circle.print_circle()

    # Вывод итоговых результатов
    print("\n=== Итоговые результаты ===")
    print("Ученики по рейтингу (убывание):")

    # Получаем список учеников и сортируем его внешней функцией
    students = circle.get_students_list()
    sorted_students = sort_students_by_rating(students)

    # Выводим результаты
    for i, (name, rating) in enumerate(sorted_students, 1):
        print(f"{i}. {name}: {rating}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nПрограмма прервана пользователем.")
    except Exception as err:
        print(f"Произошла ошибка: {err}")
