# Импорт необходимых модулей
import random  # Для генерации случайных чисел
import sys     # Для системных функций (выход из программы)

# Класс узла двусвязного списка
class StudentNode:
    # Конструктор класса
    def __init__(self, name):
        self.name = name    # Хранит фамилию ученика
        self.rating = 0     # Начальный рейтинг ученика
        self.prev = None    # Ссылка на предыдущий узел в списке
        self.next = None    # Ссылка на следующий узел в списке

# Класс для управления кругом учеников
class StudentCircle:
    # Инициализация круга
    def __init__(self):
        self.head = None          # Первый элемент списка
        self.current_marker = None # Текущая позиция начала круга
        self.size = 0             # Количество учеников в круге

    # Добавление нового ученика
    def add_student(self, name):
        # Создаем новый узел
        new_node = StudentNode(name)

        # Если список пуст
        if self.head is None:
            # Делаем узел ссылающимся сам на себя
            new_node.next = new_node
            new_node.prev = new_node
            self.head = new_node
            self.current_marker = new_node
        else:
            # Добавляем в конец списка
            last = self.head.prev
            last.next = new_node
            new_node.prev = last
            new_node.next = self.head
            self.head.prev = new_node

        # Увеличиваем счетчик учеников
        self.size += 1

    # Поиск ученика по имени
    def find_student(self, name):
        # Если список пуст
        if self.head is None:
            return None

        # Начинаем с головы списка
        current = self.head
        while True:
            # Сравниваем имена без учета регистра
            if current.name.lower() == name.lower():
                return current
            # Переходим к следующему ученику
            current = current.next
            # Если вернулись к началу - завершаем цикл
            if current == self.head:
                break
        return None

    # Перемещение по кругу на N шагов
    def get_student_steps(self, start_node, steps):
        # Если нет учеников
        if self.size == 0:
            return None

        current = start_node
        # Обработка отрицательных шагов
        if steps < 0:
            steps = self.size - (abs(steps) % self.size)

        # Нормализация шагов
        steps %= self.size

        # Выполняем шаги
        for _ in range(steps):
            current = current.next
        return current

    # Вывод текущего состояния круга
    def print_circle(self):
        # Проверка на пустой круг
        if self.head is None:
            print("Круг пуст")
            return

        current = self.head
        print("Текущий круг учеников:")
        while True:
            # Вывод информации об ученике
            print(f"{current.name} (рейтинг: {current.rating})", end="")
            # Помечаем начало круга
            if current == self.current_marker:
                print(" <- Начало круга")
            else:
                print()
            # Переход к следующему ученику
            current = current.next
            # Проверка завершения круга
            if current == self.head:
                break

    # Сортировка учеников по рейтингу
    def get_sorted_list(self):
        # Если нет учеников
        if self.head is None:
            return []

        students = []
        current = self.head
        index = 0
        # Собираем всех учеников
        while True:
            students.append((current.name, current.rating, index))
            index += 1
            current = current.next
            if current == self.head:
                break

        # Сортировка по убыванию рейтинга
        students.sort(key=lambda x: (-x[1], x[2]))
        # Возвращаем только имя и рейтинг
        return [(name, rating) for name, rating, _ in students]

# Чтение списка учеников из файла
def read_students_from_file(filename):
    try:
        # Открываем файл на чтение
        with open(filename, 'r', encoding='utf-8') as file:
            # Читаем непустые строки
            return [line.strip() for line in file if line.strip()]
    except FileNotFoundError:
        # Обработка отсутствия файла
        print(f"Ошибка: файл {filename} не найден!")
        sys.exit(1)
    except Exception as ex:
        # Обработка других ошибок
        print(f"Ошибка при чтении файла: {ex}")
        sys.exit(1)

# Выбор начального ученика
def select_starting_student(circle):
    # Показываем текущий круг
    circle.print_circle()
    while True:
        # Запрос имени ученика
        name = input("\nВведите фамилию ученика для начала: ").strip()
        # Если ввод пустой - берем первого
        if not name:
            return circle.head

        # Поиск ученика
        student = circle.find_student(name)
        if student:
            # Устанавливаем маркер начала
            circle.current_marker = student
            return student
        print("Ученик не найден. Попробуйте еще раз.")

# Ввод числа для раунда
def get_number_input(round_num):
    while True:
        try:
            # Запрос числа от пользователя
            num_input = input(f"Введите число для раунда {round_num}: ").strip()
            # Если ввод пустой - генерируем случайное
            if not num_input:
                return random.randint(-10, 10)
            # Преобразуем в число
            num = int(num_input)
            # Проверка диапазона
            if num < -10 or num > 10:
                print("Число должно быть от -10 до 10")
                continue
            return num
        except ValueError:
            print("Ошибка: введите целое число!")

# Основная функция игры
def main():
    # Приветствие
    print("=== Игра 'Добрые дела' ===")
    print("Ученики встают в круг и делают добрые дела!")

    # Запрос имени файла
    filename = input("Введите имя файла со списком учеников: ")
    # Чтение учеников из файла
    student_names = read_students_from_file(filename)

    # Проверка на пустой файл
    if not student_names:
        print("Файл не содержит имен учеников!")
        return

    # Создание круга учеников
    circle = StudentCircle()
    for name in student_names:
        circle.add_student(name)

    # Выбор начального ученика
    current_student = select_starting_student(circle)

    # Запрос количества раундов
    while True:
        try:
            rounds = int(input("\nВведите количество раундов: "))
            # Проверка положительного числа
            if rounds <= 0:
                print("Число раундов должно быть > 0")
                continue
            break
        except ValueError:
            print("Ошибка: введите целое число!")

    # Основной игровой цикл
    for round_num in range(1, rounds + 1):
        # Получение числа для раунда
        number = get_number_input(round_num)
        # Определение направления
        direction = "по часовой" if number > 0 else "против часовой" if number < 0 else "не двигаемся"

        # Вывод информации о раунде
        print(f"\nРаунд {round_num}:")
        print(f"Число: {number} ({direction})")
        print(f"Начинаем с: {current_student.name}")

        # Выбор ученика для доброго дела
        selected = circle.get_student_steps(current_student, number)
        # Увеличение рейтинга
        selected.rating += 1

        # Обновление маркера начала круга
        circle.current_marker = current_student

        # Вывод информации о действии
        print(f"Ученик {selected.name} делает доброе дело!")
        print(f"Новый рейтинг: {selected.rating}")

        # Выбор следующего ученика
        current_student = selected.next if number > 0 else selected.prev
        # Вывод обновленного круга
        circle.print_circle()

    # Вывод итогов
    print("\n=== Итоговые результаты ===")
    print("Ученики по рейтингу (убывание):")

    # Получение и вывод отсортированного списка
    sorted_students = circle.get_sorted_list()
    for i, (name, rating) in enumerate(sorted_students, 1):
        print(f"{i}. {name}: {rating}")

# Точка входа в программу
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        # Обработка прерывания пользователем
        print("\nПрограмма прервана пользователем.")
    except Exception as err:
        # Обработка других ошибок
        print(f"Произошла ошибка: {err}")

