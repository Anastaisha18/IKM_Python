import random
import sys


class StudentNode: # Узел двусвязного списка для хранения данных об ученике

    def __init__(self, name):
        self.name = name  # Фамилия ученика
        self.rating = 0  # Начальный рейтинг
        self.prev = None  # Ссылка на предыдущий узел
        self.next = None  # Ссылка на следующий узел


class StudentCircle: # Класс для реализации двусвязного циклического списка учеников

    def __init__(self):
        self.head = None  # Начальный элемент списка
        self.size = 0  # Количество учеников в круге

    def add_student(self, name): # Добавляет нового ученика в круг

        new_node = StudentNode(name)  # Создаем новый узел

        # Если список пуст, делаем новый узел головным
        if self.head is None:
            new_node.next = new_node  # Ссылка на себя
            new_node.prev = new_node  # Ссылка на себя
            self.head = new_node
        else:
            # Добавляем в конец списка
            last = self.head.prev
            last.next = new_node
            new_node.prev = last
            new_node.next = self.head
            self.head.prev = new_node

        self.size += 1  # Увеличиваем счетчик

    def find_student(self, name): # Ищет ученика по имени без учета регистра

        if self.head is None:  # Если список пуст
            return None

        current = self.head
        while True:
            # Сравниваем в нижнем регистре
            if current.name.lower() == name.lower():
                return current
            current = current.next
            if current == self.head:  # Прошли весь круг
                break
        return None  # Не нашли

    # Находит ученика через N шагов от начального
    def get_student_steps(self, start_node, steps): #

        if self.size == 0:  # Если нет учеников
            return None

        current = start_node
        # Определяем направление (1 - вперед, -1 - назад)
        direction = 1 if steps > 0 else -1
        # Корректируем количество шагов
        steps = abs(steps) % self.size if self.size != 0 else 0

        # Делаем нужное количество шагов
        for _ in range(steps):
            current = current.next if direction > 0 else current.prev

        return current

    def print_circle(self): # Выводит текущее состояние круга учеников

        if self.head is None:  # Если круг пуст
            print("Круг пуст")
            return

        current = self.head
        print("Текущий круг учеников:")
        while True:
            # Выводим имя и рейтинг
            print(f"{current.name} (рейтинг: {current.rating})", end="")
            if current == self.head:  # Помечаем начало
                print(" <- Начало круга")
            else:
                print()
            current = current.next
            if current == self.head:  # Прошли весь круг
                break

    def get_sorted_list(self): # Возвращает список учеников, отсортированный по рейтингу

        if self.head is None:  # Если нет учеников
            return []

        students = []
        current = self.head
        index = 0
        while True:
            # Сохраняем имя, рейтинг и исходный индекс
            students.append((current.name, current.rating, index))
            index += 1
            current = current.next
            if current == self.head:  # Прошли весь круг
                break

        # Сортируем по убыванию рейтинга и исходному порядку
        students.sort(key=lambda x: (-x[1], x[2])) # -x[1] по убыванию, x[2] - порядок как в файле
        # Возвращаем только имена и рейтинги
        return [(name, rating) for name, rating, _ in students]


def read_students_from_file(filename): # Читает список учеников из файла
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            # Читаем непустые строки, убирая пробелы
            students = [line.strip() for line in file if line.strip()]
        return students
    except FileNotFoundError:
        print(f"Ошибка: файл {filename} не найден!")
        sys.exit(1)
    except Exception as ex:
        print(f"Ошибка при чтении файла: {ex}")
        sys.exit(1)


def select_starting_student(circle): # Позволяет выбрать ученика для начала игры

    circle.print_circle()
    while True:
        name = input("\nВведите фамилию ученика для начала: ").strip()
        if not name:  # Если ввод пустой
            return circle.head  # Берем первого

        student = circle.find_student(name)
        if student:  # Если нашли
            return student
        print("Ученик не найден. Попробуйте еще раз.")


def get_number_input(round_num): # Запрашивает число для раунда

    while True:
        try:
            num_input = input(f"Введите число для раунда {round_num}: ").strip()
            if not num_input:  # Если ввод пустой
                return random.randint(-10, 10)  # Случайное число
            num = int(num_input)
            if num < -10 or num > 10:  # Проверка диапазона
                print("Число должно быть от -10 до 10")
                continue
            return num
        except ValueError:
            print("Ошибка: введите целое число!")


def main(): # Основная функция игры
    print("=== Игра 'Добрые дела' ===")
    print("Ученики встают в круг и делают добрые дела!")

    # Чтение списка учеников
    filename = input("Введите имя файла со списком учеников: ")
    student_names = read_students_from_file(filename)

    if not student_names:  # Если файл пустой
        print("Файл не содержит имен учеников!")
        return

    # Создаем круг учеников
    circle = StudentCircle()
    for name in student_names:
        circle.add_student(name)

    # Выбираем начального ученика
    current_student = select_starting_student(circle)

    # Запрашиваем количество раундов
    while True:
        try:
            rounds = int(input("\nВведите количество раундов: "))
            if rounds <= 0:  # Проверка на положительное число
                print("Число раундов должно быть > 0")
                continue
            break
        except ValueError:
            print("Ошибка: введите целое число!")

    # Основной игровой цикл
    for round_num in range(1, rounds + 1):
        # Получаем число для раунда
        number = get_number_input(round_num)
        direction = "по часовой" if number > 0 else "против часовой"

        print(f"\nРаунд {round_num}:")
        print(f"Число: {number} ({direction})")
        print(f"Начинаем с: {current_student.name}")

        # Находим ученика для доброго дела
        selected = circle.get_student_steps(current_student, number)
        selected.rating += 1  # Увеличиваем рейтинг

        print(f"Ученик {selected.name} делает доброе дело!")
        print(f"Новый рейтинг: {selected.rating}")

        # Выбираем следующего ученика
        current_student = selected.next if number > 0 else selected.prev

        # Показываем текущее состояние
        circle.print_circle()

    # Вывод итогов
    print("\n=== Итоговые результаты ===")
    print("Ученики по рейтингу (убывание):")

    sorted_students = circle.get_sorted_list()
    for i, (name, rating) in enumerate(sorted_students, 1):
        print(f"{i}. {name}: {rating}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nПрограмма прервана пользователем.")
    except Exception as err:
        print(f"Произошла ошибка: {err}")

